"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// this import should be first in order to load some required settings (like globals and reflect-metadata)
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var tnsOAuthModule = require("nativescript-oauth");
var firebase = require("nativescript-plugin-firebase");
var facebookInitOptions = {
    clientId: '171980550097374',
    clientSecret: '37bf7d8551c00db26b052df1926913b5',
    scope: ['email', 'user_friends'] //whatever other scopes you need 
};
firebase.init({ iOSEmulatorFlush: true })
    .then(function (instance) {
    console.log("firebase.init done");
}, function (error) {
    console.log("firebase.init error: " + error);
});
tnsOAuthModule.initFacebook(facebookInitOptions);
// A traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. 
// Angular applications need to take care of their own initialization: modules, components, directives, routes, DI providers. 
// A NativeScript Angular app needs to make both paradigms work together, so we provide a wrapper platform object, platformNativeScriptDynamic, 
// that sets up a NativeScript application and can bootstrap the Angular framework.
platform_1.platformNativeScriptDynamic().bootstrapModule(app_module_1.AppModule);
//com.googleusercontent.apps.506660694880-jn1lalk13fu25hgfee3qou81v702kh0r
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwR0FBMEc7QUFDMUcsMERBQTRFO0FBRTVFLDJDQUF5QztBQUN6QyxtREFBcUQ7QUFDckQsdURBQXlEO0FBRXpELElBQUksbUJBQW1CLEdBQTZDO0lBQ2hFLFFBQVEsRUFBRSxpQkFBaUI7SUFDM0IsWUFBWSxFQUFFLGtDQUFrQztJQUNoRCxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsaUNBQWlDO0NBQ3JFLENBQUM7QUFHRixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFDLENBQUM7S0FDdEMsSUFBSSxDQUNGLFVBQUEsUUFBUTtJQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN0QyxDQUFDLEVBQ0QsVUFBQSxLQUFLO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsS0FBTyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUNILENBQUM7QUFFRixjQUFjLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFakQseUpBQXlKO0FBQ3pKLDhIQUE4SDtBQUM5SCxnSkFBZ0o7QUFDaEosbUZBQW1GO0FBQ25GLHNDQUEyQixFQUFFLENBQUMsZUFBZSxDQUFDLHNCQUFTLENBQUMsQ0FBQztBQUV6RCwwRUFBMEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIGltcG9ydCBzaG91bGQgYmUgZmlyc3QgaW4gb3JkZXIgdG8gbG9hZCBzb21lIHJlcXVpcmVkIHNldHRpbmdzIChsaWtlIGdsb2JhbHMgYW5kIHJlZmxlY3QtbWV0YWRhdGEpXHJcbmltcG9ydCB7IHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9wbGF0Zm9ybVwiO1xyXG5cclxuaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSBcIi4vYXBwLm1vZHVsZVwiO1xyXG5pbXBvcnQgKiBhcyB0bnNPQXV0aE1vZHVsZSBmcm9tICduYXRpdmVzY3JpcHQtb2F1dGgnO1xyXG5pbXBvcnQgKiBhcyBmaXJlYmFzZSBmcm9tICduYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlJztcclxuXHJcbnZhciBmYWNlYm9va0luaXRPcHRpb25zIDogdG5zT0F1dGhNb2R1bGUuSVRuc09BdXRoT3B0aW9uc0ZhY2Vib29rID0ge1xyXG4gICAgY2xpZW50SWQ6ICcxNzE5ODA1NTAwOTczNzQnLFxyXG4gICAgY2xpZW50U2VjcmV0OiAnMzdiZjdkODU1MWMwMGRiMjZiMDUyZGYxOTI2OTEzYjUnLFxyXG4gICAgc2NvcGU6IFsnZW1haWwnLCAndXNlcl9mcmllbmRzJ10gLy93aGF0ZXZlciBvdGhlciBzY29wZXMgeW91IG5lZWQgXHJcbn07XHJcblxyXG5cclxuZmlyZWJhc2UuaW5pdCh7aU9TRW11bGF0b3JGbHVzaDogdHJ1ZX0pXHJcbi50aGVuKFxyXG4gICBpbnN0YW5jZSA9PiB7XHJcbiAgICAgICBjb25zb2xlLmxvZyhcImZpcmViYXNlLmluaXQgZG9uZVwiKTtcclxuICAgfSxcclxuICAgZXJyb3IgPT4ge1xyXG4gICAgICAgY29uc29sZS5sb2coYGZpcmViYXNlLmluaXQgZXJyb3I6ICR7ZXJyb3J9YCk7XHJcbiAgIH1cclxuKTtcclxuXHJcbnRuc09BdXRoTW9kdWxlLmluaXRGYWNlYm9vayhmYWNlYm9va0luaXRPcHRpb25zKTtcclxuXHJcbi8vIEEgdHJhZGl0aW9uYWwgTmF0aXZlU2NyaXB0IGFwcGxpY2F0aW9uIHN0YXJ0cyBieSBpbml0aWFsaXppbmcgZ2xvYmFsIG9iamVjdHMsIHNldHRpbmcgdXAgZ2xvYmFsIENTUyBydWxlcywgY3JlYXRpbmcsIGFuZCBuYXZpZ2F0aW5nIHRvIHRoZSBtYWluIHBhZ2UuIFxyXG4vLyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBuZWVkIHRvIHRha2UgY2FyZSBvZiB0aGVpciBvd24gaW5pdGlhbGl6YXRpb246IG1vZHVsZXMsIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsIHJvdXRlcywgREkgcHJvdmlkZXJzLiBcclxuLy8gQSBOYXRpdmVTY3JpcHQgQW5ndWxhciBhcHAgbmVlZHMgdG8gbWFrZSBib3RoIHBhcmFkaWdtcyB3b3JrIHRvZ2V0aGVyLCBzbyB3ZSBwcm92aWRlIGEgd3JhcHBlciBwbGF0Zm9ybSBvYmplY3QsIHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYywgXHJcbi8vIHRoYXQgc2V0cyB1cCBhIE5hdGl2ZVNjcmlwdCBhcHBsaWNhdGlvbiBhbmQgY2FuIGJvb3RzdHJhcCB0aGUgQW5ndWxhciBmcmFtZXdvcmsuXHJcbnBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpO1xyXG5cclxuLy9jb20uZ29vZ2xldXNlcmNvbnRlbnQuYXBwcy41MDY2NjA2OTQ4ODAtam4xbGFsazEzZnUyNWhnZmVlM3FvdTgxdjcwMmtoMHJcclxuIl19