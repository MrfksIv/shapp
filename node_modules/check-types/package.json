{
  "_args": [
    [
      {
        "raw": "check-types@^7.3.0",
        "scope": null,
        "escapedName": "check-types",
        "name": "check-types",
        "rawSpec": "^7.3.0",
        "spec": ">=7.3.0 <8.0.0",
        "type": "range"
      },
      "C:\\Users\\mrfksiv\\Documents\\Projects\\shapp_new\\node_modules\\bfj-node4"
    ]
  ],
  "_from": "check-types@>=7.3.0 <8.0.0",
  "_id": "check-types@7.3.0",
  "_inCache": true,
  "_location": "/check-types",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/check-types-7.3.0.tgz_1501933138652_0.15449988842010498"
  },
  "_npmUser": {
    "name": "philbooth",
    "email": "pmbooth@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "check-types@^7.3.0",
    "scope": null,
    "escapedName": "check-types",
    "name": "check-types",
    "rawSpec": "^7.3.0",
    "spec": ">=7.3.0 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bfj-node4"
  ],
  "_resolved": "https://registry.npmjs.org/check-types/-/check-types-7.3.0.tgz",
  "_shasum": "468f571a4435c24248f5fd0cb0e8d87c3c341e7d",
  "_shrinkwrap": null,
  "_spec": "check-types@^7.3.0",
  "_where": "C:\\Users\\mrfksiv\\Documents\\Projects\\shapp_new\\node_modules\\bfj-node4",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com",
    "url": "https://github.com/philbooth"
  },
  "bugs": {
    "url": "https://github.com/philbooth/check-types.js/issues"
  },
  "contributors": [
    {
      "name": "Phil Booth",
      "email": "pmbooth@gmail.com",
      "url": "https://github.com/philbooth"
    },
    {
      "name": "Rowan Manning",
      "url": "https://github.com/rowanmanning"
    },
    {
      "name": "Forbes Lindesay",
      "url": "https://github.com/ForbesLindesay"
    },
    {
      "name": "Fabrizio Moscon",
      "url": "https://github.com/fabriziomoscon"
    },
    {
      "name": "Marc-Olivier Ricard",
      "url": "https://github.com/ricardmo"
    },
    {
      "name": "Gleb Bahmutov",
      "url": "https://github.com/bahmutov"
    },
    {
      "name": "Steve Kinney",
      "url": "https://github.com/stevekinney"
    },
    {
      "name": "Gal Niv",
      "url": "https://github.com/galniv"
    },
    {
      "name": "Rodrigo GonzÃ¡lez",
      "url": "https://github.com/roro89"
    },
    {
      "name": "Alejandro Villanueva",
      "url": "https://github.com/ialex"
    },
    {
      "name": "Clinton Skakun",
      "url": "https://github.com/clintonskakun"
    },
    {
      "name": "Paul Jolly",
      "url": "https://github.com/myitcv"
    },
    {
      "name": "Ryan Temple",
      "url": "https://github.com/ryantemple"
    },
    {
      "name": "Mark Herhold",
      "url": "https://github.com/MarkHerhold"
    },
    {
      "name": "Victor Bakke",
      "url": "https://github.com/Gipphe"
    }
  ],
  "dependencies": {},
  "description": "A little library for asserting types and values.",
  "devDependencies": {
    "chai": "3.5.x",
    "jshint": "2.9.x",
    "mocha": "3.2.x",
    "please-release-me": "1.0.x",
    "uglify-js": "2.7.x"
  },
  "directories": {},
  "dist": {
    "shasum": "468f571a4435c24248f5fd0cb0e8d87c3c341e7d",
    "tarball": "https://registry.npmjs.org/check-types/-/check-types-7.3.0.tgz"
  },
  "files": [
    "COPYING",
    "HISTORY.md",
    "src"
  ],
  "gitHead": "17681756d1c39eb07e0546f39a67a37a2c71c85e",
  "homepage": "https://github.com/philbooth/check-types.js",
  "keywords": [
    "type",
    "types",
    "type-check",
    "type-checking",
    "duck-typing",
    "arguments",
    "parameters",
    "values",
    "data",
    "contract",
    "assert",
    "check",
    "verify",
    "safe",
    "safety"
  ],
  "license": "MIT",
  "main": "./src/check-types",
  "maintainers": [
    {
      "name": "philbooth",
      "email": "pmbooth@gmail.com"
    }
  ],
  "name": "check-types",
  "optionalDependencies": {},
  "readme": "# check-types.js\n\n[![Package status](https://img.shields.io/npm/v/check-types.svg?style=flat-square)](https://www.npmjs.com/package/check-types)\n[![Build status](https://img.shields.io/travis/philbooth/check-types.js.svg?style=flat-square)](https://travis-ci.org/philbooth/check-types.js)\n[![License](https://img.shields.io/github/license/philbooth/check-types.js.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n\nA little JavaScript library\nfor asserting types\nand values.\n\n* [Why would I want that?](#why-would-i-want-that)\n* [How little is it?](#how-little-is-it)\n* [How do I install it?](#how-do-i-install-it)\n* [How do I use it?](#how-do-i-use-it)\n    * [Loading the library](#loading-the-library)\n    * [Calling the exported functions](#calling-the-exported-functions)\n        * [General predicates](#general-predicates)\n        * [String predicates](#string-predicates)\n        * [Number predicates](#number-predicates)\n        * [Boolean predicates](#boolean-predicates)\n        * [Object predicates](#object-predicates)\n        * [Array predicates](#array-predicates)\n        * [Date predicates](#date-predicates)\n        * [Error predicates](#error-predicates)\n        * [Function predicates](#function-predicates)\n        * [Modifiers](#modifiers)\n        * [Batch operations](#batch-operations)\n        * [Some examples](#some-examples)\n* [Where can I use it?](#where-can-i-use-it)\n* [What changed from 6.x to 7.x?](#what-changed-from-6x-to-7x)\n* [What changed from 5.x to 6.x?](#what-changed-from-5x-to-6x)\n* [What changed from 4.x to 5.x?](#what-changed-from-4x-to-5x)\n* [What changed from 3.x to 4.x?](#what-changed-from-3x-to-4x)\n* [What changed from 2.x to 3.x?](#what-changed-from-2x-to-3x)\n* [What changed from 1.x to 2.x?](#what-changed-from-1x-to-2x)\n* [What changed from 0.x to 1.x?](#what-changed-from-0x-to-1x)\n* [How do I set up the build environment?](#how-do-i-set-up-the-build-environment)\n* [What license is it released under?](#what-license-is-it-released-under)\n\n## Why would I want that?\n\nWriting explicit conditions\nin your functions\nto check arguments\nand throw exceptions\nis a task that\nswiftly becomes tiresome\nand adds complexity\nto your codebase.\n\nThe purpose of check-types.js\nis to remove this burden\nfrom JavaScript application developers\nin an efficient and robust manner,\nabstracted by a simple API.\n\n## How little is it?\n\n21 kb unminified with comments, 6.1 kb minified, 2.2 kb minified + gzipped.\n\n## How do I install it?\n\nVia npm:\n\n```\nnpm i check-types --save\n```\n\nOr if you just want the git repo:\n\n```\ngit clone git@github.com:philbooth/check-types.js.git\n```\n\nIf you're into\nother package managers,\nit is also available\nfrom Bower, Component and Jam.\n\n## How do I use it?\n\n### Loading the library\n\nIf you are running in\nNode.js,\nBrowserify\nor another CommonJS-style\nenvironment,\nyou can `require`\ncheck-types like so:\n\n```javascript\nvar check = require('check-types');\n```\n\nIt also the supports\nthe AMD-style format\npreferred by Require.js.\n\nIf you are\nincluding check-types.js\nwith an HTML `<script>` tag,\nor neither of the above environments\nare detected,\nit will export the interface globally as `check`.\n\n### Calling the exported functions\n\nOnce you've loaded the library\nin your application,\na whole bunch of functions are available\nto call.\n\nMost of the functions\nare predicates,\nwhich can be executed\nin a number of different contexts:\n\n* `check.xxx(thing)`:\n  These functions are basic predicates,\n  returning true or false\n  depending on the type and value of `thing`.\n\n* `check.not.xxx(thing)`:\n  The `not` modifier\n  negates predicates,\n  returning `true` if the predicate returns `false`\n  and `false` if the predicate returns `true`.\n  It is also itself a function,\n  which simply returns\n  the negation of\n  its argument.\n\n* `check.maybe.xxx(thing)`:\n  The `maybe` modifier\n  tweaks predicates to\n  return `true` if `thing` is `null` or `undefined`,\n  otherwise their normal result\n  is returned.\n  It is also itself a function,\n  which returns `true`\n  when its argument is `null` or `undefined`,\n  otherwise it returns its argument.\n\n* `check.assert.xxx(thing, message)`:\n  The `assert` modifier\n  changes predicates\n  to throw when their result is `false`,\n  otherwise it returns `thing`.\n  It can be applied\n  to the `not` and `maybe` modifiers\n  using the forms\n  `check.assert.not.xxx(thing, message)` and\n  `check.assert.maybe.xxx(thing, message)`.\n  It is also itself a function,\n  which simply throws\n  when its argument is false.\n\n* `check.array.of.xxx(thing)`:\n  The `array.of` modifier\n  first checks that\n  it is operating on an array\n  and then applies\n  the modified predicate\n  to each item\n  of the array.\n  If the predicate fails\n  for any item,\n  it returns `false`,\n  otherwise it returns `true`.\n  It can also be prefixed\n  by other modifiers,\n  so `check.maybe.array.of`,\n  `check.not.array.of`,\n  `check.assert.array.of`,\n  `check.assert.maybe.array.of` and\n  `check.assert.not.array.of`\n  all work\n  as you would expect\n  them to.\n\n* `check.arrayLike.of.xxx(thing)`:\n  The `arrayLike.of` modifier\n  is synonymous with `array.of`,\n  except it operates on array-like objects.\n\n* `check.iterable.of.xxx(thing)`:\n  The `iterable.of` modifier\n  is synonymous with `array.of`,\n  except it operates on iterables.\n\n* `check.object.of.xxx(thing)`:\n  The `object.of` modifier\n  is synonymous with `array.of`,\n  except it operates on an object's properties.\n\nAdditionally, there are some batch operations\nthat allow you to apply different predicates\nto each value\nin an array or object.\nThese are implemented by\n`check.apply`,\n`check.map`,\n`check.any` and\n`check.all`.\n\n#### General predicates\n\n* `check.equal(thing, thang)`:\n  Returns `true`\n  if `thing === thang`,\n  `false` otherwise.\n\n* `check.null(thing)`:\n  Returns `true`\n  if `thing` is `null`,\n  `false` otherwise.\n\n* `check.undefined(thing)`:\n  Returns `true`\n  if `thing` is `undefined`,\n  `false` otherwise.\n\n* `check.assigned(thing)`:\n  Returns `true`\n  if `thing` is not\n  `null` or `undefined`,\n  `false` otherwise.\n\n* `check.primitive(thing)`:\n  Returns `true`\n  if `thing` is a primitive type,\n  `false` otherwise.\n  Primitive types are\n  `null`, `undefined`, booleans, numbers, strings and symbols.\n\n* `check.hasLength(thing, value)`:\n  Returns `true`\n  if `thing` has a length property\n  that equals `value`,\n  `false` otherwise.\n\n#### String predicates\n\n* `check.string(thing)`:\n  Returns `true`\n  if `thing` is a string,\n  `false` otherwise.\n\n* `check.emptyString(thing)`:\n  Returns `true`\n  if `thing` is the empty string,\n  `false` otherwise.\n\n* `check.nonEmptyString(thing)`:\n  Returns `true`\n  if `thing` is a non-empty string,\n  `false` otherwise.\n\n* `check.contains(thing, substring)`:\n  Returns `true`\n  if `thing` is a string\n  that contains `substring`,\n  `false` otherwise.\n\n* `check.match(thing, regex)`:\n  Returns `true`\n  if `thing` is a string\n  that matches `regex`,\n  `false` otherwise.\n\n#### Number predicates\n\n* `check.number(thing)`:\n  Returns `true`\n  if `thing` is a number,\n  `false` otherwise.\n  Note that\n  `NaN`,\n  `Number.POSITIVE_INFINITY` and\n  `Number.NEGATIVE_INFINITY`\n  are not considered numbers here.\n\n* `check.integer(thing)`:\n  Returns `true`\n  if `thing` is an integer,\n  `false` otherwise.\n\n* `check.zero(thing)`:\n  Returns `true`\n  if `thing` is zero,\n  `false` otherwise.\n\n* `check.infinity(thing)`:\n  Returns `true`\n  if `thing` is positive or negative infinity,\n  `false` otherwise.\n\n* `check.greater(thing, value)`:\n  Returns `true` if `thing` is a number\n  greater than `value`,\n  `false` otherwise.\n\n* `check.greaterOrEqual(thing, value)`:\n  Returns `true` if `thing` is a number\n  greater than or equal to `value`,\n  `false` otherwise.\n\n* `check.less(thing, value)`:\n  Returns `true` if `thing` is a number\n  less than `value`,\n  `false` otherwise.\n\n* `check.lessOrEqual(thing, value)`:\n  Returns `true` if `thing` is a number\n  less than or equal to `value`,\n  `false` otherwise.\n\n* `check.between(thing, a, b)`:\n  Returns `true` if `thing` is a number\n  between than `a` and `b`,\n  `false` otherwise.\n  The arguments `a` and `b`\n  may be in any order,\n  it doesn't matter\n  which is greater.\n\n* `check.inRange(thing, a, b)`:\n  Returns `true` if `thing` is a number\n  in the range `a` .. `b`,\n  `false` otherwise.\n  The arguments `a` and `b`\n  may be in any order,\n  it doesn't matter\n  which is greater.\n\n* `check.positive(thing)`:\n  Returns `true` if `thing` is a number\n  greater than zero,\n  `false` otherwise.\n\n* `check.negative(thing)`:\n  Returns `true`\n  if `thing` is a number\n  less than zero,\n  `false` otherwise.\n\n* `check.odd(thing)`:\n  Returns `true`\n  if `thing` is an odd number,\n  `false` otherwise.\n\n* `check.even(thing)`:\n  Returns `true`\n  if `thing` is an even number,\n  `false` otherwise.\n\n#### Boolean predicates\n\n* `check.boolean(thing)`:\n  Returns `true`\n  if `thing` is a boolean,\n  `false` otherwise.\n\n#### Object predicates\n\n* `check.object(thing)`:\n  Returns `true`\n  if `thing` is a plain-old JavaScript object,\n  `false` otherwise.\n\n* `check.emptyObject(thing)`:\n  Returns `true`\n  if `thing` is an empty object,\n  `false` otherwise.\n\n* `check.nonEmptyObject(thing)`:\n  Returns `true`\n  if `thing` is a non-empty object,\n  `false` otherwise.\n\n* `check.instanceStrict(thing, prototype)`:\n  Returns `true`\n  if `thing` is an instance of `prototype`,\n  `false` otherwise.\n\n* `check.instance(thing, prototype)`:\n  Returns `true`\n  if `thing` is an instance of `prototype`,\n  `false` otherwise.\n  Falls back to testing\n  `constructor.name` and `Object.prototype.toString`\n  if the `instanceof` test fails.\n\n* `check.like(thing, duck)`:\n  Duck-typing checker.\n  Returns `true`\n  if `thing` has all of the properties of `duck`,\n  `false` otherwise.\n\n#### Array predicates\n\n* `check.array(thing)`:\n  Returns `true`\n  if `thing` is an array,\n  `false` otherwise.\n\n* `check.emptyArray(thing)`:\n  Returns `true`\n  if `thing` is an empty array,\n  `false` otherwise.\n\n* `check.nonEmptyArray(thing)`:\n  Returns `true`\n  if `thing` is a non-empty array,\n  `false` otherwise.\n\n* `check.arrayLike(thing)`:\n  Returns `true`\n  if `thing` has a numeric length property,\n  `false` otherwise.\n\n* `check.iterable(thing)`:\n  Returns `true`\n  if `thing` implements the iterable protocol,\n  `false` otherwise.\n  In pre-ES6 environments,\n  this predicate falls back\n  to `arrayLike` behaviour.\n\n* `check.includes(thing, value)`:\n  Returns `true`\n  if `thing` includes `value`,\n  `false` otherwise.\n\n#### Date predicates\n\n* `check.date(thing)`:\n  Returns `true`\n  if `thing` is a valid date,\n  `false` otherwise.\n\n#### Function predicates\n\n* `check.function(thing)`:\n  Returns `true`\n  if `thing` is a function,\n  `false` otherwise.\n\n#### Modifiers\n\n* `check.not(value)`:\n  Returns the negation\n  of `value`.\n\n* `check.not.xxx(...)`:\n  Returns the negation\n  of the predicate.\n\n* `check.maybe(value)`:\n  Returns `true`\n  if `value` is `null` or `undefined`,\n  otherwise it returns `value`.\n\n* `check.maybe.xxx(...)`:\n  Returns `true`\n  if `thing` is `null` or `undefined`,\n  otherwise it propagates\n  the return value\n  from its predicate.\n\n* `check.array.of.xxx(value)`:\n  Returns `true`\n  if `value` is an array\n  and the predicate is true\n  for every item.\n  Also works with the `not` and `maybe` modifiers.\n\n* `check.arrayLike.of.xxx(thing)`:\n  The `arrayLike.of` modifier\n  is synonymous with `array.of`,\n  except it operates on array-like objects.\n\n* `check.iterable.of.xxx(thing)`:\n  The `iterable.of` modifier\n  is synonymous with `array.of`,\n  except it operates on iterables.\n\n* `check.object.of.xxx(thing)`:\n  The `object.of` modifier\n  is synonymous with `array.of`,\n  except it operates on an object's properties.\n\n* `check.assert(value, message, ErrorType)`:\n  Throws a `TypeError`\n  if `value` is *falsy*,\n  otherwise it returns `value`.\n  `message` and `ErrorType`\n  are optional arguments\n  that control\n  the message and type\n  of the thrown error object.\n\n* `check.assert.xxx(...)`:\n  Throws a `TypeError`\n  if the predicate returns false,\n  otherwise it returns the subject value.\n  The last two arguments\n  are an optional message and error type\n  that control\n  the message and type\n  of the thrown error object.\n  Also works with the `not`, `maybe` and `...of` modifiers.\n\n#### Batch operations\n\n* `check.apply(things, predicates)`:\n  Applies each value from the `things` array\n  to the corresponding predicate\n  and returns the array of results.\n  Passing a single predicate\n  instead of an array\n  applies all of the values\n  to the same predicate.\n\n* `check.map(things, predicates)`:\n  Maps each value from the `things` object\n  to the corresponding predicate\n  and returns an object\n  containing the results.\n  Supports nested objects.\n  Passing a single predicate\n  instead of an object\n  applies all of the values\n  to the same predicate,\n  ignoring nested objects.\n\n* `check.all(results)`:\n  Returns `true`\n  if all the result values are true\n  in an array (returned from `apply`)\n  or object (returned from `map`).\n\n* `check.any(predicateResults)`:\n  Returns `true`\n  if any result value is true\n  in an array (returned from `apply`)\n  or object (returned from `map`).\n\n#### Some examples\n\n```javascript\ncheck.even(3);\n// Returns false\n```\n\n```javascript\ncheck.not.even(3);\n// Returns true\n```\n\n```javascript\ncheck.maybe.even(null);\n// Returns true\n```\n\n```javascript\ncheck.assert.like({ foo: 'bar' }, { baz: 'qux' });\n// Throws `new TypeError('Invalid type')`\n```\n\n```javascript\ncheck.assert.not.like({ foo: 'bar' }, { baz: 'qux' });\n// Doesn't throw, returns `{ foo: 'bar' }`\n```\n\n```javascript\ncheck.assert.maybe.like(undefined, { foo: 'bar' });\n// Doesn't throw, returns `undefined`\n```\n\n```javascript\ncheck.assert(myFunction(), 'Something went wrong', CustomError);\n// Throws `new CustomError('Something went wrong')` if myFunction returns `false`\n```\n\n```javascript\ncheck.apply([ 'foo', 'bar', '' ], check.nonEmptyString);\n// Returns [ true, true, false ]\n```\n\n```javascript\ncheck.map({\n    foo: 2,\n    bar: { baz: 'qux' }\n}, {\n    foo: check.odd,\n    bar: { baz: check.nonEmptyString }\n});\n// Returns { foo: false, bar: { baz: true } }\n```\n\n```javascript\ncheck.all(\n    check.map(\n        { foo: 0, bar: '' },\n        { foo: check.number, bar: check.string }\n    );\n);\n// Returns true\n```\n\n```javascript\ncheck.any(\n    check.apply(\n        [ 1, 2, 3, '' ],\n        check.string\n    )\n);\n// Returns true\n```\n\n## Where can I use it?\n\nAs of version 2.0,\nthis library no longer supports ES3.\nThat means you can't use it\nin IE 7 or 8.\n\nEverywhere else should be fine.\n\nIf those versions of IE\nare important to you,\nworry not!\nThe 1.x versions\nall support old IE\nand any future 1.x versions\nwill adhere to that too.\n\nSee the [releases]\nfor more information.\n\n## What changed from 6.x to 7.x?\n\nBreaking changes\nwere made to the API\nin version 7.0.0.\n\nSpecifically,\nthe `instance` predicate\nwas renamed to `instanceStrict`\nand the `builtIn` and `userDefined` predicates\nwere combined to form\na new `instance` predicate.\n\nSee the [history][history7]\nfor more details.\n\n## What changed from 5.x to 6.x?\n\nBreaking changes\nwere made to the API\nin version 6.0.0.\n\nSpecifically,\nthe `either` modifier was removed.\nInstead,\ncalling code can use\nthe `any` function,\nor simply express the boolean logic\nin JS.\n\nSee the [history][history6]\nfor more details.\n\n## What changed from 4.x to 5.x?\n\nBreaking changes\nwere made to the API\nin version 5.0.0.\n\nSpecifically,\nthe predicates `isMap` and `error` were removed\nin favour of the new predicate `builtIn`,\nwhich can be used to test for\nall built-in objects.\n\nSee the [history][history5]\nfor more details.\n\n## What changed from 3.x to 4.x?\n\nBreaking changes\nwere made to the API\nin version 4.0.0.\n\nSpecifically,\nthe predicate `unemptyString`\nwas renamed to `nonEmptyString`\nand the predicate `error`\nwas changed to support\nderived Error objects.\n\nSee the [history][history4]\nfor more details.\n\n## What changed from 2.x to 3.x?\n\nBreaking changes\nwere made to the API\nin version 3.0.0.\n\nSpecifically,\nthe predicate `length`\nwas renamed to `hasLength`\nand the predicate `webUrl`\nwas removed.\n\nSee the [history][history3]\nfor more details.\n\n## What changed from 1.x to 2.x?\n\nBreaking changes\nwere made to the API\nin version 2.0.0.\n\nSpecifically:\n\n* Support for ES3 was dropped\n* The predicates `gitUrl`, `email` and `floatNumber` were removed.\n* `verify` was renamed to `assert`.\n* `nulled` was renamed to `null`.\n* `oddNumber` was renamed to `odd`.\n* `evenNumber` was renamed to `even`.\n* `positiveNumber` was renamed to `positive`.\n* `negativeNumber` was renamed to `negative`.\n* `intNumber` was renamed to `integer`.\n* `bool` was renamed to `boolean`.\n* `defined` was swapped to become `undefined`.\n* `webUrl` was tightened to reject more cases.\n\nSee the [history][history2]\nfor more details.\n\n## What changed from 0.x to 1.x?\n\nBreaking changes\nwere made to the API\nin version 1.0.0.\n\nSpecifically,\nall of the predicates\nwere renamed\nfrom `check.isXxxx`\nto `check.xxx` and\nall of the verifiers\nwere renamed\nfrom `check.verifyXxxx`\nto `check.verify.xxx`.\n\nSee the [history][history1]\nfor more details.\n\n## How do I set up the build environment?\n\nThe build environment relies on\n[Node.js][node],\n[NPM],\n[JSHint],\n[Mocha],\n[Chai],\n[UglifyJS] and\n[please-release-me].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install` to\ninstall all of the dependencies as listed in `package.json`.\n\nThe unit tests are in `test/check-types.js`.\nYou can run them with the command `npm test`.\nTo run the tests in a web browser,\nopen `test/check-types.html`.\n\n## What license is it released under?\n\n[MIT][license]\n\n[releases]: https://github.com/philbooth/check-types.js/releases\n[history7]: HISTORY.md#70\n[history6]: HISTORY.md#60\n[history5]: HISTORY.md#50\n[history4]: HISTORY.md#40\n[history3]: HISTORY.md#30\n[history2]: HISTORY.md#20\n[history1]: HISTORY.md#10\n[node]: http://nodejs.org/\n[npm]: https://npmjs.org/\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://mochajs.org/\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n[please-release-me]: https://github.com/philbooth/please-release-me\n[license]: https://github.com/philbooth/check-types.js/blob/master/COPYING\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/philbooth/check-types.js.git"
  },
  "scripts": {
    "lint": "jshint ./src/check-types.js",
    "minify": "uglifyjs ./src/check-types.js --compress --mangle --output ./src/check-types.min.js",
    "test": "mocha --ui tdd --reporter spec --colors ./test/check-types.js"
  },
  "version": "7.3.0"
}
