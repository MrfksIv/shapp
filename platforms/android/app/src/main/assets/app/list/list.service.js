"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mock_dataitems_1 = require("../classes/mock-dataitems");
var dataitem_class_1 = require("../classes/dataitem.class");
var namesAndEmails = require("./NamesAndEmails.json");
var posts = require("./posts.json");
var listItems = require("./list-layouts/listItems.json");
var ListService = /** @class */ (function () {
    function ListService() {
        this._words = ["One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten"];
    }
    ListService.prototype.getDataItems = function () {
        return mock_dataitems_1.DATAITEMS;
    };
    ListService.prototype.getIdenticalDataItems = function (size) {
        var result = new Array();
        for (var i = 0; i < size; i++) {
            result.push(new dataitem_class_1.DataItem(i, "Item " + i, "This is item description."));
        }
        return result;
    };
    ListService.prototype.getPersonDataItems = function () {
        var result = new Array();
        for (var i = 0; i < namesAndEmails.names.length; i++) {
            result.push(new dataitem_class_1.DataItem(i, namesAndEmails.names[i], "This is item description"));
        }
        return result;
    };
    ListService.prototype.getNameEmailDataItems = function () {
        var result = new Array();
        for (var i = 0; i < namesAndEmails.names.length; i++) {
            result.push(new dataitem_class_1.DataItem(i, namesAndEmails.names[i], namesAndEmails.emails[i]));
        }
        return result;
    };
    ListService.prototype.getPostDataItems = function () {
        var result = new Array();
        for (var i = 0; i < posts.names.length; i++) {
            result.push(new dataitem_class_1.DataItem(i, posts.names[i], "This is item description", posts.titles[i], posts.text[i]));
        }
        return result;
    };
    ListService.prototype.getListItemsFromJson = function () {
        var result = new Array();
        for (var i = 0; i < listItems.items.length; i++) {
            result.push(new dataitem_class_1.DataItem(i, listItems.items[i].author, "This is item description", listItems.items[i].title, listItems.items[i].category, listItems.items[i].photo));
        }
        return result;
    };
    ListService.prototype.getStaggeredItems = function () {
        var result = new Array();
        for (var i = 0; i < 50; i++) {
            result.push(new dataitem_class_1.DataItem(i, "Item " + i, this.getRandomLengthString()));
        }
        return result;
    };
    ListService.prototype.getDataOperationsItems = function () {
        return [
            new dataitem_class_1.DataItem(89, "Special Item 89", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(23, "Item 23", "This is item category is: Category 2", null, null, null, false, null, "Category 2"),
            new dataitem_class_1.DataItem(1, "Item 1", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(34, "Item 34", "This is item category is: Category 3", null, null, null, false, null, "Category 3"),
            new dataitem_class_1.DataItem(55, "Special Item 55", "This is item category is: Category 3", null, null, null, false, null, "Category 3"),
            new dataitem_class_1.DataItem(78, "Item 78", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(5, "Item 5", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(111, "Special Item 111", "This is item category is: Category 2", null, null, null, false, null, "Category 2"),
            new dataitem_class_1.DataItem(665, "Special Item 665", "This is item category is: Category 2", null, null, null, false, null, "Category 2"),
            new dataitem_class_1.DataItem(1134, "Item 1134", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(22, "Special Item 22", "This is item category is: Category 3", null, null, null, false, null, "Category 3"),
            new dataitem_class_1.DataItem(345, "Item 345", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(80, "Item 80", "This is item category is: Category 1", null, null, null, false, null, "Category 1"),
            new dataitem_class_1.DataItem(54, "Item 54", "This is item category is: Category 3", null, null, null, false, null, "Category 3"),
        ];
    };
    ListService.prototype.getRandomLengthString = function () {
        var sentenceLength = Math.round((Math.random() * 15));
        var result = this._words[0];
        for (var i = 0; i < sentenceLength; i++) {
            result += (this._words[i % this._words.length] + " ");
        }
        return result;
    };
    ListService = __decorate([
        core_1.Injectable()
    ], ListService);
    return ListService;
}());
exports.ListService = ListService;
//# sourceMappingURL=data:application/json;base64,