"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var Subject_1 = require("rxjs/Subject");
var list_class_1 = require("../classes/list.class");
var ListsService = /** @class */ (function () {
    function ListsService() {
        this.listsSubjects = new Subject_1.Subject();
    }
    ListsService.prototype.createNewList = function (list) {
        if (list.uid) {
            var list_data = {
                creatorUID: list.uid,
                dateCreated: list.dateCreated,
                dateModified: list.dateModified,
                description: list.listDescription,
                items: []
            };
            return firebase.push('/lists', list_data);
        }
    };
    ListsService.prototype.getUserLists = function (uid) {
        var _this = this;
        if (uid) {
            var liststArray_1 = new Array();
            firebase.query(function (firebase_result) {
                // console.log("FIREBASE RESULT:");
                // console.dir(firebase_result)
                if (!firebase_result['value']) {
                    // add code for saving the data to new user
                }
                else {
                    for (var list_key in firebase_result.value) {
                        var currentList = firebase_result.value[list_key];
                        liststArray_1.push(new list_class_1.List(currentList['creatorUID'], currentList['description'], currentList['dateCreated'], currentList['dateModified']));
                    }
                }
                _this.listsSubjects.next(liststArray_1);
            }, '/lists', {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'creatorUID'
                },
                range: {
                    type: firebase.QueryRangeType.EQUAL_TO,
                    value: uid
                },
                limit: {
                    type: firebase.QueryLimitType.FIRST,
                    value: 20
                }
            });
        }
    };
    ListsService.prototype.getListsAsObservable = function () {
        return this.listsSubjects.asObservable();
    };
    ListsService = __decorate([
        core_1.Injectable()
    ], ListsService);
    return ListsService;
}());
exports.ListsService = ListsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3RzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsdURBQXlEO0FBSXpELHdDQUFzQztBQUV0QyxvREFBNkM7QUFHN0M7SUFEQTtRQUdZLGtCQUFhLEdBQUcsSUFBSSxpQkFBTyxFQUFPLENBQUM7SUE4RC9DLENBQUM7SUE1REcsb0NBQWEsR0FBYixVQUFjLElBQVE7UUFDbEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDWCxJQUFNLFNBQVMsR0FBRztnQkFDZCxVQUFVLEVBQUcsSUFBSSxDQUFDLEdBQUc7Z0JBQ3JCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDN0IsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2dCQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWU7Z0JBQ2pDLEtBQUssRUFBRSxFQUFFO2FBQ1osQ0FBQztZQUNGLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixRQUFRLEVBQ1IsU0FBUyxDQUNaLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVELG1DQUFZLEdBQVosVUFBYSxHQUFXO1FBQXhCLGlCQXVDQztRQXRDRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ04sSUFBSSxhQUFXLEdBQUcsSUFBSSxLQUFLLEVBQVEsQ0FBQztZQUNwQyxRQUFRLENBQUMsS0FBSyxDQUNWLFVBQUEsZUFBZTtnQkFDWCxtQ0FBbUM7Z0JBQ25DLCtCQUErQjtnQkFDL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUU1QiwyQ0FBMkM7Z0JBQy9DLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osR0FBRyxDQUFDLENBQUMsSUFBSSxRQUFRLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUM7d0JBQ3hDLElBQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQ3BELGFBQVcsQ0FBQyxJQUFJLENBQUUsSUFBSSxpQkFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsRUFDeEMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUMxQixXQUFXLENBQUMsYUFBYSxDQUFDLEVBQzFCLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzlDLENBQUM7Z0JBQ0wsQ0FBQztnQkFDRCxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFXLENBQUMsQ0FBQztZQUN6QyxDQUFDLEVBQ0QsUUFBUSxFQUNSO2dCQUNJLFdBQVcsRUFBRSxJQUFJO2dCQUNqQixPQUFPLEVBQUU7b0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO29CQUNyQyxLQUFLLEVBQUUsWUFBWTtpQkFDdEI7Z0JBQ0QsS0FBSyxFQUFFO29CQUNILElBQUksRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVE7b0JBQ3RDLEtBQUssRUFBRSxHQUFHO2lCQUNiO2dCQUNELEtBQUssRUFBRTtvQkFDSCxJQUFJLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLO29CQUNuQyxLQUFLLEVBQUUsRUFBRTtpQkFDWjthQUNKLENBQ0osQ0FBQztRQUNOLENBQUM7SUFDTCxDQUFDO0lBRUQsMkNBQW9CLEdBQXBCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDN0MsQ0FBQztJQS9EUSxZQUFZO1FBRHhCLGlCQUFVLEVBQUU7T0FDQSxZQUFZLENBZ0V4QjtJQUFELG1CQUFDO0NBQUEsQUFoRUQsSUFnRUM7QUFoRVksb0NBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGZpcmViYXNlIGZyb20gJ25hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2UnO1xyXG5pbXBvcnQgKiBhcyBBcHBsaWNhdGlvblNldHRpbmdzIGZyb20gJ2FwcGxpY2F0aW9uLXNldHRpbmdzJztcclxuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCJcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gXCJyeGpzL1N1YmplY3RcIlxyXG5cclxuaW1wb3J0IHsgTGlzdCB9IGZyb20gJy4uL2NsYXNzZXMvbGlzdC5jbGFzcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMaXN0c1NlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgbGlzdHNTdWJqZWN0cyA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuXHJcbiAgICBjcmVhdGVOZXdMaXN0KGxpc3Q6YW55KSB7XHJcbiAgICAgICAgaWYgKGxpc3QudWlkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3RfZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGNyZWF0b3JVSUQgOiBsaXN0LnVpZCxcclxuICAgICAgICAgICAgICAgIGRhdGVDcmVhdGVkOiBsaXN0LmRhdGVDcmVhdGVkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZU1vZGlmaWVkOiBsaXN0LmRhdGVNb2RpZmllZCxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBsaXN0Lmxpc3REZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UucHVzaChcclxuICAgICAgICAgICAgICAgICcvbGlzdHMnLFxyXG4gICAgICAgICAgICAgICAgbGlzdF9kYXRhXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJMaXN0cyh1aWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh1aWQpIHtcclxuICAgICAgICAgICAgbGV0IGxpc3RzdEFycmF5ID0gbmV3IEFycmF5PExpc3Q+KCk7XHJcbiAgICAgICAgICAgIGZpcmViYXNlLnF1ZXJ5KCBcclxuICAgICAgICAgICAgICAgIGZpcmViYXNlX3Jlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJGSVJFQkFTRSBSRVNVTFQ6XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGlyKGZpcmViYXNlX3Jlc3VsdClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcmViYXNlX3Jlc3VsdFsndmFsdWUnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGNvZGUgZm9yIHNhdmluZyB0aGUgZGF0YSB0byBuZXcgdXNlclxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxpc3Rfa2V5IGluIGZpcmViYXNlX3Jlc3VsdC52YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IGZpcmViYXNlX3Jlc3VsdC52YWx1ZVtsaXN0X2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0c3RBcnJheS5wdXNoKCBuZXcgTGlzdChjdXJyZW50TGlzdFsnY3JlYXRvclVJRCddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkZXNjcmlwdGlvbiddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkYXRlQ3JlYXRlZCddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkYXRlTW9kaWZpZWQnXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdHNTdWJqZWN0cy5uZXh0KGxpc3RzdEFycmF5KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAnL2xpc3RzJyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSwgLy8gZm9yIGNoZWNraW5nIGlmIHRoZSB2YWx1ZSBleGlzdHMgKHJldHVybiB0aGUgd2hvbGUgZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICBvcmRlckJ5OiB7IC8vIHRoZSBwcm9wZXJ0eSBpbiBlYWNoIG9mIHRoZSBvYmplY3RzIGluIHdoaWNoIHRvIHBlcmZvcm0gdGhlIHF1ZXJ5IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLkNISUxELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2NyZWF0b3JVSUQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByYW5nZTogeyAvLyB0aGUgY29tcGFyaXNvbiBvcGVyYXRvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeVJhbmdlVHlwZS5FUVVBTF9UTyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHVpZFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGltaXQ6IHsgLy8gbGltaXQgdG8gb25seSByZXR1cm4gdGhlIGZpcnN0IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeUxpbWl0VHlwZS5GSVJTVCwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAyMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGlzdHNBc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saXN0c1N1YmplY3RzLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4gICAgICAgICAgICAgICAgIl19