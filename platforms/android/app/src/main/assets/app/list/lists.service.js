"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var Subject_1 = require("rxjs/Subject");
var list_class_1 = require("../classes/list.class");
var ListsService = /** @class */ (function () {
    function ListsService() {
        this.listsSubjects = new Subject_1.Subject();
    }
    ListsService.prototype.createNewList = function (list) {
        if (list.creatorUID) {
            var list_data = {
                creatorUID: list.creatorUID,
                dateCreated: list.dateCreated,
                dateModified: list.dateModified,
                description: list.description,
                archived: false,
                items: []
            };
            console.log("CREATING NEW LIST FROM SERVICE");
            return firebase.push('/lists', list_data);
        }
    };
    ListsService.prototype.getUserLists = function (uid) {
        var _this = this;
        if (uid) {
            var liststArray_1 = new Array();
            firebase.query(function (firebase_result) {
                // console.log("FIREBASE RESULT:");
                // console.dir(firebase_result)
                if (!firebase_result['value']) {
                    // add code for saving the data to new user
                }
                else {
                    for (var list_key in firebase_result.value) {
                        var currentList = firebase_result.value[list_key];
                        liststArray_1.push(new list_class_1.List(currentList['creatorUID'], currentList['description'], currentList['dateCreated'], currentList['dateModified'], list_key));
                    }
                }
                _this.listsSubjects.next(liststArray_1);
            }, '/lists', {
                singleEvent: true,
                orderBy: {
                    type: firebase.QueryOrderByType.CHILD,
                    value: 'creatorUID'
                },
                range: {
                    type: firebase.QueryRangeType.EQUAL_TO,
                    value: uid
                },
                limit: {
                    type: firebase.QueryLimitType.FIRST,
                    value: 20
                }
            });
        }
    };
    ListsService.prototype.getListsAsObservable = function () {
        return this.listsSubjects.asObservable();
    };
    ListsService = __decorate([
        core_1.Injectable()
    ], ListsService);
    return ListsService;
}());
exports.ListsService = ListsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3RzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFDM0MsdURBQXlEO0FBSXpELHdDQUFzQztBQUV0QyxvREFBNkM7QUFHN0M7SUFEQTtRQUdZLGtCQUFhLEdBQUcsSUFBSSxpQkFBTyxFQUFPLENBQUM7SUFpRS9DLENBQUM7SUEvREcsb0NBQWEsR0FBYixVQUFjLElBQVE7UUFDbEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbEIsSUFBTSxTQUFTLEdBQUc7Z0JBQ2QsVUFBVSxFQUFHLElBQUksQ0FBQyxVQUFVO2dCQUM1QixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7Z0JBQzdCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDL0IsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO2dCQUM3QixRQUFRLEVBQUUsS0FBSztnQkFDZixLQUFLLEVBQUUsRUFBRTthQUNaLENBQUM7WUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLFFBQVEsRUFDUixTQUFTLENBQ1osQ0FBQztRQUNOLENBQUM7SUFDTCxDQUFDO0lBRUQsbUNBQVksR0FBWixVQUFhLEdBQVc7UUFBeEIsaUJBd0NDO1FBdkNHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDTixJQUFJLGFBQVcsR0FBRyxJQUFJLEtBQUssRUFBUSxDQUFDO1lBQ3BDLFFBQVEsQ0FBQyxLQUFLLENBQ1YsVUFBQSxlQUFlO2dCQUNYLG1DQUFtQztnQkFDbkMsK0JBQStCO2dCQUMvQixFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRTVCLDJDQUEyQztnQkFDL0MsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQzt3QkFDeEMsSUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDcEQsYUFBVyxDQUFDLElBQUksQ0FBRSxJQUFJLGlCQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxFQUN4QyxXQUFXLENBQUMsYUFBYSxDQUFDLEVBQzFCLFdBQVcsQ0FBQyxhQUFhLENBQUMsRUFDMUIsV0FBVyxDQUFDLGNBQWMsQ0FBQyxFQUMzQixRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUMzQixDQUFDO2dCQUNMLENBQUM7Z0JBQ0QsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBVyxDQUFDLENBQUM7WUFDekMsQ0FBQyxFQUNELFFBQVEsRUFDUjtnQkFDSSxXQUFXLEVBQUUsSUFBSTtnQkFDakIsT0FBTyxFQUFFO29CQUNMLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSztvQkFDckMsS0FBSyxFQUFFLFlBQVk7aUJBQ3RCO2dCQUNELEtBQUssRUFBRTtvQkFDSCxJQUFJLEVBQUUsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRO29CQUN0QyxLQUFLLEVBQUUsR0FBRztpQkFDYjtnQkFDRCxLQUFLLEVBQUU7b0JBQ0gsSUFBSSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSztvQkFDbkMsS0FBSyxFQUFFLEVBQUU7aUJBQ1o7YUFDSixDQUNKLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVELDJDQUFvQixHQUFwQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFsRVEsWUFBWTtRQUR4QixpQkFBVSxFQUFFO09BQ0EsWUFBWSxDQW1FeEI7SUFBRCxtQkFBQztDQUFBLEFBbkVELElBbUVDO0FBbkVZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBmaXJlYmFzZSBmcm9tICduYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlJztcclxuaW1wb3J0ICogYXMgQXBwbGljYXRpb25TZXR0aW5ncyBmcm9tICdhcHBsaWNhdGlvbi1zZXR0aW5ncyc7XHJcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiXHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwicnhqcy9TdWJqZWN0XCJcclxuXHJcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi9jbGFzc2VzL2xpc3QuY2xhc3MnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTGlzdHNTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIGxpc3RzU3ViamVjdHMgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcblxyXG4gICAgY3JlYXRlTmV3TGlzdChsaXN0OmFueSkge1xyXG4gICAgICAgIGlmIChsaXN0LmNyZWF0b3JVSUQpIHtcclxuICAgICAgICAgICAgY29uc3QgbGlzdF9kYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRvclVJRCA6IGxpc3QuY3JlYXRvclVJRCxcclxuICAgICAgICAgICAgICAgIGRhdGVDcmVhdGVkOiBsaXN0LmRhdGVDcmVhdGVkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZU1vZGlmaWVkOiBsaXN0LmRhdGVNb2RpZmllZCxcclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBsaXN0LmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgYXJjaGl2ZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRJTkcgTkVXIExJU1QgRlJPTSBTRVJWSUNFXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UucHVzaChcclxuICAgICAgICAgICAgICAgICcvbGlzdHMnLFxyXG4gICAgICAgICAgICAgICAgbGlzdF9kYXRhXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJMaXN0cyh1aWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh1aWQpIHtcclxuICAgICAgICAgICAgbGV0IGxpc3RzdEFycmF5ID0gbmV3IEFycmF5PExpc3Q+KCk7XHJcbiAgICAgICAgICAgIGZpcmViYXNlLnF1ZXJ5KCBcclxuICAgICAgICAgICAgICAgIGZpcmViYXNlX3Jlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJGSVJFQkFTRSBSRVNVTFQ6XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZGlyKGZpcmViYXNlX3Jlc3VsdClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpcmViYXNlX3Jlc3VsdFsndmFsdWUnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGNvZGUgZm9yIHNhdmluZyB0aGUgZGF0YSB0byBuZXcgdXNlclxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGxpc3Rfa2V5IGluIGZpcmViYXNlX3Jlc3VsdC52YWx1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50TGlzdCA9IGZpcmViYXNlX3Jlc3VsdC52YWx1ZVtsaXN0X2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0c3RBcnJheS5wdXNoKCBuZXcgTGlzdChjdXJyZW50TGlzdFsnY3JlYXRvclVJRCddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkZXNjcmlwdGlvbiddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkYXRlQ3JlYXRlZCddLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMaXN0WydkYXRlTW9kaWZpZWQnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rfa2V5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0c1N1YmplY3RzLm5leHQobGlzdHN0QXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICcvbGlzdHMnLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZUV2ZW50OiB0cnVlLCAvLyBmb3IgY2hlY2tpbmcgaWYgdGhlIHZhbHVlIGV4aXN0cyAocmV0dXJuIHRoZSB3aG9sZSBkYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyQnk6IHsgLy8gdGhlIHByb3BlcnR5IGluIGVhY2ggb2YgdGhlIG9iamVjdHMgaW4gd2hpY2ggdG8gcGVyZm9ybSB0aGUgcXVlcnkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuQ0hJTEQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnY3JlYXRvclVJRCdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiB7IC8vIHRoZSBjb21wYXJpc29uIG9wZXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5UmFuZ2VUeXBlLkVRVUFMX1RPLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdWlkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBsaW1pdDogeyAvLyBsaW1pdCB0byBvbmx5IHJldHVybiB0aGUgZmlyc3QgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5TGltaXRUeXBlLkZJUlNULCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDIwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRMaXN0c0FzT2JzZXJ2YWJsZSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RzU3ViamVjdHMuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiAgICAgICAgICAgICAgICAiXX0=