"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// this import should be first in order to load some required settings (like globals and reflect-metadata)
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var tnsOAuthModule = require("nativescript-oauth");
var firebase = require("nativescript-plugin-firebase");
var facebookInitOptions = {
    clientId: '171980550097374',
    clientSecret: '37bf7d8551c00db26b052df1926913b5',
    scope: ['email', 'user_friends'] //whatever other scopes you need 
};
firebase.init({ iOSEmulatorFlush: true })
    .then(function (instance) {
    console.log("firebase.init done");
}, function (error) {
    console.log("firebase.init error: " + error);
});
tnsOAuthModule.initFacebook(facebookInitOptions);
// A traditional NativeScript application starts by initializing global objects, setting up global CSS rules, creating, and navigating to the main page. 
// Angular applications need to take care of their own initialization: modules, components, directives, routes, DI providers. 
// A NativeScript Angular app needs to make both paradigms work together, so we provide a wrapper platform object, platformNativeScriptDynamic, 
// that sets up a NativeScript application and can bootstrap the Angular framework.
platform_1.platformNativeScriptDynamic().bootstrapModule(app_module_1.AppModule);
//com.googleusercontent.apps.506660694880-jn1lalk13fu25hgfee3qou81v702kh0r
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwR0FBMEc7QUFDMUcsMERBQTRFO0FBRTVFLDJDQUF5QztBQUN6QyxtREFBcUQ7QUFDckQsdURBQXlEO0FBRXpELElBQUksbUJBQW1CLEdBQTZDO0lBQ2hFLFFBQVEsRUFBRSxpQkFBaUI7SUFDM0IsWUFBWSxFQUFFLGtDQUFrQztJQUNoRCxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMsaUNBQWlDO0NBQ3JFLENBQUM7QUFHRixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUMsZ0JBQWdCLEVBQUUsSUFBSSxFQUFDLENBQUM7S0FDdEMsSUFBSSxDQUNGLFVBQUEsUUFBUTtJQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUN0QyxDQUFDLEVBQ0QsVUFBQSxLQUFLO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBd0IsS0FBTyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUNILENBQUM7QUFFRixjQUFjLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFakQseUpBQXlKO0FBQ3pKLDhIQUE4SDtBQUM5SCxnSkFBZ0o7QUFDaEosbUZBQW1GO0FBQ25GLHNDQUEyQixFQUFFLENBQUMsZUFBZSxDQUFDLHNCQUFTLENBQUMsQ0FBQztBQUV6RCwwRUFBMEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGlzIGltcG9ydCBzaG91bGQgYmUgZmlyc3QgaW4gb3JkZXIgdG8gbG9hZCBzb21lIHJlcXVpcmVkIHNldHRpbmdzIChsaWtlIGdsb2JhbHMgYW5kIHJlZmxlY3QtbWV0YWRhdGEpXG5pbXBvcnQgeyBwbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvcGxhdGZvcm1cIjtcblxuaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSBcIi4vYXBwLm1vZHVsZVwiO1xuaW1wb3J0ICogYXMgdG5zT0F1dGhNb2R1bGUgZnJvbSAnbmF0aXZlc2NyaXB0LW9hdXRoJztcbmltcG9ydCAqIGFzIGZpcmViYXNlIGZyb20gJ25hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2UnO1xuXG52YXIgZmFjZWJvb2tJbml0T3B0aW9ucyA6IHRuc09BdXRoTW9kdWxlLklUbnNPQXV0aE9wdGlvbnNGYWNlYm9vayA9IHtcbiAgICBjbGllbnRJZDogJzE3MTk4MDU1MDA5NzM3NCcsXG4gICAgY2xpZW50U2VjcmV0OiAnMzdiZjdkODU1MWMwMGRiMjZiMDUyZGYxOTI2OTEzYjUnLFxuICAgIHNjb3BlOiBbJ2VtYWlsJywgJ3VzZXJfZnJpZW5kcyddIC8vd2hhdGV2ZXIgb3RoZXIgc2NvcGVzIHlvdSBuZWVkIFxufTtcblxuXG5maXJlYmFzZS5pbml0KHtpT1NFbXVsYXRvckZsdXNoOiB0cnVlfSlcbi50aGVuKFxuICAgaW5zdGFuY2UgPT4ge1xuICAgICAgIGNvbnNvbGUubG9nKFwiZmlyZWJhc2UuaW5pdCBkb25lXCIpO1xuICAgfSxcbiAgIGVycm9yID0+IHtcbiAgICAgICBjb25zb2xlLmxvZyhgZmlyZWJhc2UuaW5pdCBlcnJvcjogJHtlcnJvcn1gKTtcbiAgIH1cbik7XG5cbnRuc09BdXRoTW9kdWxlLmluaXRGYWNlYm9vayhmYWNlYm9va0luaXRPcHRpb25zKTtcblxuLy8gQSB0cmFkaXRpb25hbCBOYXRpdmVTY3JpcHQgYXBwbGljYXRpb24gc3RhcnRzIGJ5IGluaXRpYWxpemluZyBnbG9iYWwgb2JqZWN0cywgc2V0dGluZyB1cCBnbG9iYWwgQ1NTIHJ1bGVzLCBjcmVhdGluZywgYW5kIG5hdmlnYXRpbmcgdG8gdGhlIG1haW4gcGFnZS4gXG4vLyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBuZWVkIHRvIHRha2UgY2FyZSBvZiB0aGVpciBvd24gaW5pdGlhbGl6YXRpb246IG1vZHVsZXMsIGNvbXBvbmVudHMsIGRpcmVjdGl2ZXMsIHJvdXRlcywgREkgcHJvdmlkZXJzLiBcbi8vIEEgTmF0aXZlU2NyaXB0IEFuZ3VsYXIgYXBwIG5lZWRzIHRvIG1ha2UgYm90aCBwYXJhZGlnbXMgd29yayB0b2dldGhlciwgc28gd2UgcHJvdmlkZSBhIHdyYXBwZXIgcGxhdGZvcm0gb2JqZWN0LCBwbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMsIFxuLy8gdGhhdCBzZXRzIHVwIGEgTmF0aXZlU2NyaXB0IGFwcGxpY2F0aW9uIGFuZCBjYW4gYm9vdHN0cmFwIHRoZSBBbmd1bGFyIGZyYW1ld29yay5cbnBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpO1xuXG4vL2NvbS5nb29nbGV1c2VyY29udGVudC5hcHBzLjUwNjY2MDY5NDg4MC1qbjFsYWxrMTNmdTI1aGdmZWUzcW91ODF2NzAya2gwclxuIl19